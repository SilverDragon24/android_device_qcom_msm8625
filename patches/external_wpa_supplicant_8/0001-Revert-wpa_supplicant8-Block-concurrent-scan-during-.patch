From e88aae7edd56f4f3c78b709349dd14a00af0effa Mon Sep 17 00:00:00 2001
From: dhacker29 <dhackerdvm@gmail.com>
Date: Mon, 7 Apr 2014 10:38:19 +0200
Subject: [PATCH 1/2] Revert "wpa_supplicant8: Block concurrent scan during p2p
 connect"

This reverts commit 7a30d7b9898a3d3bb18b83dd8083b3260d004e56.
---
 wpa_supplicant/ctrl_iface.c       | 36 +++++++++++----------------------
 wpa_supplicant/p2p_supplicant.c   | 42 ---------------------------------------
 wpa_supplicant/wpa_supplicant_i.h |  4 ----
 3 files changed, 12 insertions(+), 70 deletions(-)

diff --git a/wpa_supplicant/ctrl_iface.c b/wpa_supplicant/ctrl_iface.c
index ef2bc4d..079d1b3 100644
--- a/wpa_supplicant/ctrl_iface.c
+++ b/wpa_supplicant/ctrl_iface.c
@@ -411,12 +411,8 @@ static int wpa_supplicant_ctrl_iface_wps_pbc(struct wpa_supplicant *wpa_s,
 	}
 
 #ifdef CONFIG_AP
-	if (wpa_s->ap_iface) {
-#ifdef CONFIG_P2P
-		wpas_p2p_block_concurrent_scan(wpa_s);
-#endif
+	if (wpa_s->ap_iface)
 		return wpa_supplicant_ap_wps_pbc(wpa_s, _bssid, _p2p_dev_addr);
-	}
 #endif /* CONFIG_AP */
 
 	return wpas_wps_start_pbc(wpa_s, _bssid, 0);
@@ -2722,7 +2718,7 @@ static int p2p_ctrl_connect(struct wpa_supplicant *wpa_s, char *cmd,
 				wps_method = WPS_PIN_DISPLAY;
 		}
 	}
-	wpas_p2p_block_concurrent_scan(wpa_s);
+
 	new_pin = wpas_p2p_connect(wpa_s, addr, pin, wps_method,
 				   persistent_group, automatic, join,
 				   auth, go_intent, freq, persistent_id, pd);
@@ -3758,7 +3754,6 @@ static int wfd_ctrl_set(struct wpa_supplicant *wpa_s, char *cmd)
 }
 #endif
 
-
 char * wpa_supplicant_ctrl_iface_process(struct wpa_supplicant *wpa_s,
 					 char *buf, size_t *resp_len)
 {
@@ -4079,23 +4074,16 @@ char * wpa_supplicant_ctrl_iface_process(struct wpa_supplicant *wpa_s,
 		if (wpa_s->wpa_state == WPA_INTERFACE_DISABLED)
 			reply_len = -1;
 		else {
-			if (wpas_p2p_concurrent_scan_blocked(wpa_s))
-                                reply_len = os_snprintf(reply, reply_size,
-                                                        "FAIL-BUSY\n");
-			else {
-				if (!wpa_s->scanning &&
-					((wpa_s->wpa_state <= WPA_SCANNING) ||
-					(wpa_s->wpa_state == WPA_COMPLETED))) {
-						wpa_s->scan_req = 2;
-						wpa_supplicant_req_scan(wpa_s,
-									0, 0);
-				} else {
-					wpa_printf(MSG_DEBUG, "Ongoing scan "
-					   "action - reject new request");
-					reply_len = os_snprintf(reply,
-								reply_size,
-								"FAIL-BUSY\n");
-				}
+			if (!wpa_s->scanning &&
+			    ((wpa_s->wpa_state <= WPA_SCANNING) ||
+			     (wpa_s->wpa_state == WPA_COMPLETED))) {
+				wpa_s->scan_req = 2;
+				wpa_supplicant_req_scan(wpa_s, 0, 0);
+			} else {
+				wpa_printf(MSG_DEBUG, "Ongoing scan action - "
+					   "reject new request");
+				reply_len = os_snprintf(reply, reply_size,
+							"FAIL-BUSY\n");
 			}
 		}
 	} else if (os_strcmp(buf, "SCAN_RESULTS") == 0) {
diff --git a/wpa_supplicant/p2p_supplicant.c b/wpa_supplicant/p2p_supplicant.c
index e2c2574..b23eb9f 100644
--- a/wpa_supplicant/p2p_supplicant.c
+++ b/wpa_supplicant/p2p_supplicant.c
@@ -578,7 +578,6 @@ static void wpas_group_formation_completed(struct wpa_supplicant *wpa_s,
 	wpa_s->p2p_in_provisioning = 0;
 
 	if (!success) {
-		wpas_p2p_unblock_concurrent_scan(wpa_s);
 		wpa_msg(wpa_s->parent, MSG_INFO,
 			P2P_EVENT_GROUP_FORMATION_FAILURE);
 		wpas_p2p_group_delete(wpa_s, 0);
@@ -2644,7 +2643,6 @@ static void wpas_p2p_check_join_scan_limit(struct wpa_supplicant *wpa_s)
 			   " for join operationg - stop join attempt",
 			   MAC2STR(wpa_s->pending_join_iface_addr));
 		eloop_cancel_timeout(wpas_p2p_join_scan, wpa_s, NULL);
-		wpas_p2p_unblock_concurrent_scan(wpa_s);
 		if (wpa_s->p2p_auto_pd) {
 			wpa_s->p2p_auto_pd = 0;
 			wpa_msg(wpa_s, MSG_INFO, P2P_EVENT_PROV_DISC_FAILURE
@@ -2855,7 +2853,6 @@ static void wpas_p2p_scan_res_join(struct wpa_supplicant *wpa_s,
 		u16 method;
 
 		if (wpas_check_freq_conflict(wpa_s, freq) > 0) {
-			wpas_p2p_unblock_concurrent_scan(wpa_s);
 			wpa_msg(wpa_s->parent, MSG_INFO,
 				P2P_EVENT_GROUP_FORMATION_FAILURE
 				"reason=FREQ_CONFLICT");
@@ -4194,7 +4191,6 @@ void wpas_p2p_completed(struct wpa_supplicant *wpa_s)
 
 	freq = wpa_s->current_bss ? wpa_s->current_bss->freq :
 		(int) wpa_s->assoc_freq;
-	wpas_p2p_unblock_concurrent_scan(wpa_s);
 	if (ssid->passphrase == NULL && ssid->psk_set) {
 		char psk[65];
 		wpa_snprintf_hex(psk, sizeof(psk), ssid->psk, 32);
@@ -4865,7 +4861,6 @@ void wpas_p2p_notify_ap_sta_authorized(struct wpa_supplicant *wpa_s,
 {
 	if (addr == NULL)
 		return;
-	wpas_p2p_unblock_concurrent_scan(wpa_s);
 	wpas_p2p_add_persistent_group_client(wpa_s, addr);
 }
 
@@ -4948,41 +4943,4 @@ int wpas_p2p_handle_frequency_conflicts(struct wpa_supplicant *wpa_s, int freq)
 	}
 	return 0;
 }
-
-int wpas_p2p_concurrent_scan_blocked(struct wpa_supplicant *wpa_s)
-{
-	struct wpa_supplicant *iface = NULL;
-	for (iface = wpa_s->global->ifaces; iface; iface = iface->next) {
-		if (iface->p2p_block_concurrent_scan) {
-			wpa_printf(MSG_DEBUG, "P2P: P2P Connection in "
-				"progress on %s,defer SCAN", iface->ifname);
-			return 1;
-		}
-	}
-	return 0;
-}
-
-static void wpas_p2p_block_concurrent_scan_timeout(void *eloop_ctx,
-                                             void *timeout_ctx)
-{
-	struct wpa_supplicant *wpa_s = eloop_ctx;
-	wpa_printf(MSG_DEBUG,
-		   "P2P: wpas_p2p_block_concurrent_scan_timeout");
-	wpa_s->p2p_block_concurrent_scan = 0;
-}
-
-void wpas_p2p_block_concurrent_scan(struct wpa_supplicant *wpa_s)
-{
-	wpa_s->p2p_block_concurrent_scan = 1;
-	eloop_register_timeout(2*60, 0, wpas_p2p_block_concurrent_scan_timeout,
-			       wpa_s,NULL);
-}
-
-void wpas_p2p_unblock_concurrent_scan(struct wpa_supplicant *wpa_s)
-{
-	wpa_s->p2p_block_concurrent_scan = 0;
-	eloop_cancel_timeout(wpas_p2p_block_concurrent_scan_timeout,
-			     wpa_s , NULL);
-}
-
 #endif
diff --git a/wpa_supplicant/wpa_supplicant_i.h b/wpa_supplicant/wpa_supplicant_i.h
index 5efb970..3d7d313 100644
--- a/wpa_supplicant/wpa_supplicant_i.h
+++ b/wpa_supplicant/wpa_supplicant_i.h
@@ -519,7 +519,6 @@ struct wpa_supplicant {
 	unsigned int p2p_persistent_group:1;
 	unsigned int p2p_fallback_to_go_neg:1;
 	unsigned int p2p_pd_before_go_neg:1;
-	unsigned int p2p_block_concurrent_scan:1;
 
 	int p2p_persistent_id;
 	int p2p_go_intent;
@@ -649,9 +648,6 @@ void wpa_supplicant_mark_disassoc(struct wpa_supplicant *wpa_s);
 int wpa_supplicant_connect(struct wpa_supplicant *wpa_s,
 			   struct wpa_bss *selected,
 			   struct wpa_ssid *ssid);
-int wpas_p2p_concurrent_scan_blocked(struct wpa_supplicant *wpa_s);
-void wpas_p2p_block_concurrent_scan(struct wpa_supplicant *wpa_s);
-void wpas_p2p_unblock_concurrent_scan(struct wpa_supplicant *wpa_s);
 void wpa_supplicant_stop_countermeasures(void *eloop_ctx, void *sock_ctx);
 void wpa_supplicant_delayed_mic_error_report(void *eloop_ctx, void *sock_ctx);
 
-- 
1.8.3.2

